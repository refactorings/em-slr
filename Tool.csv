Tuck,Unknown,"This paper proposes a transformation tuck that restructures code and reorganizes unclear big fragments into small cohesive functions. Tuck deconstructs large functions into small functions by restructuring programs. Wedge, split, and fold are the three parts that make up tuck. Then, statements of meaningful functions in a wedge are split and folded into a new function. Overall, the paper revolves around the application of tuck transformations to imrpove the construction of a software system."
CloRT,Unknown,CloRT is developed to take into account the shared elements of cloned methods while utilizing the strategy design pattern to differentiate them. A dynamic pattern matching algorithm is used to identify the semantic distinctions between clones and their translation in terms of programming language entities.
Nate,Unknown,"Nate performed the Extract Method refactoring by extracting the slice into a new method, replacing it with a method call. For each extracted statement, the tool determines whether to remove it from the original method or to keep it there because it is still relevant"
CCShaper,Unknown,"CCShaper is a refactoring support tool based on code clone analysis. Software maintenance is made difficult by code clone, therefore by eliminating this issue performance is improved. This tool is reportedly more time efficient compared to software on a larger scale. The user is able to select which clones to remove by characterizing code clones."
Aries,Unknown,"ARIES is a refactoring support tool based on code clone analysis. Software maintenance is made difficult by code clone, therefore by eliminating this issue performance is improved. This tool is reportedly more time efficient compared to software on a larger scale. The user is able to select which clones to remove by characterizing code clones."
SDAR,Unknown,SDAR (Star Diagram Automated Refactoring) is a plug-in for Eclipse that is utilized to detect and apply local and global refactoring through star diagrams. The plug-in reveals that previously established JDT refactorings can apply new tools with star diagram refactorings. The tool offers refactoring options that imrpove code and aid development opportunities.
Unnamed,Unknown,This paper constructs an algorithm to recognize the arguments and outcomes of an extraction method. The implementation is an Eclipse plugin and uses the Java Development Tools library provided by Eclipse
Xrefactory,http://www.xref-tech.com/sitemap/,"XRefactory is a C++ refactoring tool utilizing a back-mapping preprocessor to perform at the level of compilers. The tool performs refactoring such as renaming, adding, moving method parameters, and method extraction. Although this tool only involves limited refactoring, the quality of the analysis is indicative of the tool."
Unnamed,https://github.com/misto/Ruby-Refactoring,"This plug-in was developed for Eclipse Ruby Development Tools IDE since automated refactorings are not included in Ruby. Dynamic typing of Ruby makes implementing refactorings very difficult since it can be impossible for an IDE to determine an object type; therefore, refactorings were applied loosly adapted from JDT. This plug-in was added to the official RDT repository and into Aptana's web development IDE."
RefactoringAnnotation,Unknown,"The tool Refactoring Annotations for Extract Method refactoring allows the user to find solutions for coding errors. The annotations depend on what code section the programmer suggests and applies relevant refactoring recommendations. This is done automattically by implementing an arow to be drawn on parameters and return values. The study this tool was developed conlcuded that speed, accuracy, and user satisfaction increase with the application of new tools. Usability recommendations are implemented and the goal is to cultivate a new generation of tools that are user-friendly for programmers."
JDeodorant,https://github.com/tsantalis/jdeodorant,"JDeodorant encompasses identifying specific Extract Method refactoring opportunities. This method is vital for refactorings as it resolves Duplicated Code, Feature Envy, Long Method, and Message Chains. This tool automatically identifies Extract Method opportunities to suggest improvement instead of requiring a set of statements by the programmer."
AutoMed,Unknown,AutoMed is a refactoring tool that recommends parts of long methods to be extracted from code. This tool is analyzed on a non-trivial open source project that determined the refactoring cose of long methods may be reduced by forty percent throughout evaluation. The point of this tool is to evaluate code so that the ending result is comprised of easy to read well-named code.
Wrangler,https://github.com/RefactoringTools/wrangler,Wrangler is a hybrid approach based on tokens and AST to detect code clones in Erlang/OTP programs automatically. The proposed clone detection approach is capable of reporting code fragments that are syntactically identical and support clone removal using function extraction
HaRe,https://github.com/RefactoringTools/HaRe,HaRe is designed for Haskell to detect and eliminate code duplication for function extraction.
ReAF,Unknown,"ReAF (Refactoring Automated FInding) is a prototype tool that handles the all Java language grammer. Initially, the user inputs source files to form a software system that the tool will visualize and build procedural PDG for every method in the input. The tool can only handle Java source code but can be developed to handle other languages."
Unnamed,Unknown,"This unnamed algorithm highlights the problem of automatically inferring contracts such as validity, safety, completeness, and generality with method extraction. The proposed solution was to create two tools that are fast and capable to be interactive in an environment while maintaining precision. The applicable solution is comprised of forward/backward methods that are iterative."
CeDAR,Unknown,"CeDAR (Clone Detection, Analysis, and Refactoring) is an Eclipse plug-in that sends results of clone detection data to Eclipse. This IDE receives the information and determines which clones can be refactored by specifying the clones with specific properties to be refactored. This tool reportedly detects considerably more clone groups compared with open source artifacts."
FTMPAT,Unknown,"FTMPAT introduce a method that relies on slice-based cohesion metrics to merge software clones. The method starts by taking two similar methods as input and first detect syntactic differences between them using AST differencing. Subsequently, it identifies pairs of code fragments within these methods, to serve as suitable candidates for Extract Method. Then, the identified candidates are evaluated and prioritized using slice-based cohesion metrics."
SPAPE,Unknown,The tool SPAPE is a near-miss clone extraction method that has been applied to ten large scale open source softwares and reportedly can extract more clones than these softwares. SPAPE was developed initially in C programming language to automatically refactor near-miss clones. Four types of duplicated code or clones were identified through the manual refactoring. SPAPE utilizes a symbolic program execution to transform data and identify duplicated code to ensure cohesiveness for programmers.
JExtract,http://aserg-ufmg.github.io/jextract/," ""JExtract is utilized to identify and rank refactoring opportunities regarding Extract Method as a plug-in for Eclipse IDE. The tool begins bgy generating all Extract Method possibilities for each method then ranks these methods between dependencies in the code. The goal of this tool was to determine an automated way to recommend new methods that hide dependencies or similarities in code. JExtract was found to be more effective than JDeodorant in identifying misplaced code throuhgout methods."""
DCRA,Unknown,"DCRA (Duplicated Code Refactoring Advisor) is a tool that suggests the best refactoring for Java code clones. The authors of this paper believe that duplicated code is the most vital to improve source code. The approach usde to devleop the tool inclydes the organizing clones in a heirarchy then evaluating each case. Along with this process, a validation process to show effectiveness of the code is provided."
RASE,https://people.cs.vt.edu/nm8247/research.html,RASE is a clone removal tool that can apply combinations of six refactorings. Extract Method is one of these refactroings used to extract common code guided by systematic edits.
SEMI,https://www.cs.rug.nl/search/uploads/Resources/,"The tool SEMI (SRP-based Extract Method Identificatgion) ranks refactoring opportunities based on their ability to be extracted. SRP (Single Responsibility Principle) is an object-oritented principle that was proposed to allow Extract Method in longer methods. This paper outlines Long Method, one of the most common smells, to be implemented within a method to identify refactoring opportunities. The SEMI approach determines which parts of code are cohesive between statements. This can minimize the size of each method and create clear resulting methods that are increasingly SRP-compliant. This tool was validated with an industrial case study and comparative case study."
GEMS, https://www.comp.nus.edu.sg/~specmine/gems/,"GEMS focuses on establishing the criteria that utilizes open source repositories to determine a novel ranking system. This method was tested comparatively with JDeodorant, JExtract, and SEMI to emphasize the precedence of this tool. The Eclipse plug-in was created with the value of supporting software reliability with method extraction. GEMS validates potential code for a method and assigns a ""goodness"" score to it and recomends refactoring pertaining to Extract Method."
PostponableRefactoring,https://github.com/katsuhisamaruyama/PostponableRefactoring,"Postponable Refactoring tool works to check conditions of code and report each defined error. These errors, normal, fatal, and recoverable, each alert the user when to apply refactoring. Each error is technically refactorable since code may be rewritten altogether, but knowing which segments need work proves useful to programmers especially throughout large projects. This Eclipse plug-in has a goal of inspiring a new field of manual and automated refactoring."
LLPM,Unknown,The tool outlined in this paper combines method-level software metrics applying a log-linear probabilistic model for accustomed refactorings. This application was tested with refactorings of real-world Extract Method applications allowing the researchers to obtain parameter sets that capture the reason behind such refactorings. This analyzation was completed through identifying code to refactor and prioritizing various method groups to refactor. The proposed model optimizes parameters that maximize the probability of the collected dataset to accurately refactor long method bad smells.
PRI,Unknown,"PRI  employs refactoring pattern templates and traces cloned code fragments across revisions. PRI takes as input the results from a clone detector, and then automatically identifies refactored regions through refactoring pattern rules in the subsequent revisions, and summarizes refactoring changes across revisions."
LMR,Unknown,"LMR (Long Method Remover) tool utilizes program analysis and code metrics by implements refactoring enabling conditions. This approach uses two guidlines for effective refactoring sets which are code analyzability level and statement number. Initially, LMR is applied to a java application core package which shows that long method bad smell can completely be eliminated in code without removing behavior or making it more difficult to analyze. Overall, LMR was found to meet all class objectives from the refactoring identification."
CREC,https://github.com/soniapku/CREC,"CREC is an approach based on learning proposes specifc clones through feature extraction. These recommendations for automatic clone detection are based on software projects currently happening and previously documented. The tool initially refactors R-clones (historically refactored) and NR-clones (typically not refactored). This process occurs through thirty-four features that dissect the properties of each clone to catagorize. Clone data preparation, training, and testing are the three phases that implement CREC and allow it to accurately recommend refactoring to the programmer."
Bandago,Unknown,"Bandago is implemented on top of JSpIRIT, an Eclipse plugin for identifying and prioritizing code smells in Java. Bandago performs a heuristic search using a simulated annealing algorithm that repeatedly applies the Extract Method refactoring"
Unnamed,https://github.com/noyosida/ProactiveCloneRecommendation,"This unnamed tool for Extract Method refactoring is used as a proactive clone recommendation system. The process is meant to be implementedd as an Eclipse plug-in to keep track of changes in the code. Code clones result in decrease of productivity in software development due to multiple code fragment sets. This tool works to suggest changes in real time versus at the end of the project. This routine allows for the code to be fresh in the programmers mind, allowing for more efficient progress. This is accomplished by actively tracking the work of the user in Eclipse and suggesting edits."
Unnamed,Unknown,"This paper proposes a refactoring method for finding duplicate code used in branch statements and refactoring them by extracting common parts. The results of the case studies with unskilled developers yielded, on average 10% reduction in the source code."
CloneRefactor,https://github.com/simonbaars/clonerefactor,"CloneRefactor detects code clones that are suitable for refactoring by focusing on the context and scope of clones, Their results indicate that about 40% of the code duplication can be refactored through method extraction, while other clones require other refactoring techniques."
TOAD,https://github.com/Aleli03/TOAD,"TOAD is a tool that performs a search of specific portions of source code that includes developer's original code selection and meets ideal conditions for Extract Method. The approach operates during the workflow of refactorings and chooses fragments of code that have accurate syntax along with outlined necessities. The tool explicitly recommends auto-refactoring alternatives when the user selects a piece of code and requests refactoring options. Overall, TOAD reduced failed attempts significantly at a lower cognitive cost for extract method refactoring."
Segmentation,https://www.cse.iitb.ac.in/~omkarendra/,"The tool Segmentation identifies ectract method opportunities that focus on achieving higher performance with less suggestions. When compared with other tools, segmentation outperformed with F-measure approaches and suggest that it evinced high precision regarding small methods and long methods in opportunities with extract method. Empirical validations were applied to six open source code applications to assess beneficial suggestions. Overall, Segmentation provides improvements with comparable recall and precision while identifying extract method refactorings."
LiveRef,https://github.com/saracouto1318/LiveRef,"LiveRef is a tool implemented for Live Refactoring Java Code. It works to resolve problems with long feedback loops that allow code to be maintainable and readable. The environment provides efficient refactoring suggestions by diminishing the time that it takes to apply, recommend, and identify for the refactoring-loop. The plugin for Java IntelliJ IDE implemented a Live Refactoring Environment that automatically applies Extract Method. The tool results in improvements in quality of the code along with quicker programming solutions."
AntiCopyPaster,https://github.com/JetBrains-Research/anti-copy-paster,"AntiCopyPaster is an IntelliJ IDEA plugin, and experimented with machine learning models to increase the adoption and usage of the Extract Method refactoring while maintaining a developer's workflow. The proposed approach relies on mining prior applied Extract Method refactorings and extracting their features to train a deep learning classifier that detects them in the user's code. The authors trained and evaluated various popular models on a dataset of 18,942 code fragments from 13 Open Source Apache projects to develop the approach. Their results reveal that machine learning models can recommend Extract Method refactoring opportunities as soon as code duplicates are introduced in the IDE, and the participants were satisfied with the AntiCopyPaster tool."
REM,https://zenodo.org/record/8124395,"REM is  an automated Extract Method built on top of the IntelliJ IDEA plugin for Rust. Results reveal that REM can extract a larger class of feature rich code fragments into semantically correct functions, can reproduce method extractions performed manually by human developers, and is efficient enough to be used in interactive development."
